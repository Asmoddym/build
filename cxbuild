#!/usr/bin/ruby

module Options
	DEFAULT_BUILD_DIR = ".build"
	DEFAULT_CLEAN = false
	DEFAULT_CMAKE_LOCATION = "."
	DEFAULT_MUTE = false
	OPTIONS = {
		["-c", "--clean"] => ["cleanDirectory", true, "Cleans the building directory [before, after, both] build (default: #{DEFAULT_CLEAN})"],
		["-b", "--build-dir"] => ["setBuildDirectory", true, "Defines the building directory (default: \"#{DEFAULT_BUILD_DIR}\")"],
		["-f", "--cmakelists"] => ["setCMakeListsLocation", true, "Defines the CMakeLists.txt directory location (default: \"#{DEFAULT_CMAKE_LOCATION}\")"],
		["-m", "--mute"] => ["muteCMakeLog", false, "Mutes the cmake and make command logs (default: #{DEFAULT_MUTE})"],
		["--help", "-h"] => ["displayHelp", false, "Displays help"],
		["-v", "--verbose"] => ["makeVerbose", false, "Enables make verbose mode"],
		["-i", "--install"] => ["enableInstall", false, "Installs the built elements via cmake"],
		["--no-sudo"] => ["installWithoutSudo", false, "Installs the built elements without using sudo (works only with --install)"],
	}

	def isOption(arg)
		OPTIONS.each { |opts, data|
			return true if opts.include?(arg)
		}
		false
	end

	def takesParameter(option)
		OPTIONS.each {|options, data|
			return data[1] if options.include?(option)
		}
		false
	end

	def getMethod(option)
		OPTIONS.each {|options, data|
			return data[0] if options.include?(option)
		}
		nil
	end
end

class Help
	include Options
	def self.display
		puts "USAGE: #{__FILE__} [options...]"
		puts
		puts "OPTIONS (optional):"
		OPTIONS.each { |options, data|
			puts "  - #{options.to_s}: #{data[2]}"
		}
	end
end

class Commands
	attr_reader :build_options

	def initialize
		@build_options = {
			clean: Options::DEFAULT_CLEAN,
			build_dir: Options::DEFAULT_BUILD_DIR,
			cmake_location: Options::DEFAULT_CMAKE_LOCATION,
			mute: Options::DEFAULT_MUTE,
			help: false,
			verbose: false,
			install: false,
			sudo: true,
		}
	end

	def cleanDirectory(arg)
		if arg == 'before' || arg == 'after' || arg == 'both'
			@build_options[:clean] = arg
		else
			return false
		end
		true
	end

	def setBuildDirectory(arg)
		@build_options[:build_dir] = arg
		!@build_options[:build_dir].nil?
	end

	def setCMakeListsLocation(arg)
		@build_options[:cmake_location] = arg
		!@build_options[:cmake_location].nil?
	end

	def muteCMakeLog(arg)
		@build_options[:mute] = true
		true
	end

	def displayHelp(arg)
		@build_options[:help] = true
		true
	end

	def makeVerbose(arg)
		@build_options[:verbose] = true
		true
	end

	def enableInstall(arg)
		@build_options[:install] = true
		true
	end

	def installWithoutSudo(arg)
		@build_options[:sudo] = false
		true
	end
end

class Log
	def self.log(msg)
		puts "[  LOG  ] " << msg
	end

	def self.error(msg)
		puts "[ ERROR ] " << msg
	end
end

class Builder
	def command(cmd, hide_output = false)
		ret = system(hide_output ? (cmd << " &> /tmp/" << Time.now.to_i.to_s << ".build.log") : cmd)
		ret.nil? || ret == false ? false : true
	end

	def build(build_options, cmake_options)
		if build_options[:help] == true
			Help.display
			return true
		end

		if command("test -f #{build_options[:build_dir]}", true)
			Log.error "\"#{build_options[:build_dir]}\" is already a file and should not be defined as build directory."
			return false
		end

		if build_options[:clean] == "before" || build_options[:clean] == "both"
			Log.log "Cleaning build directory \"#{build_options[:build_dir]}\""
			if command("rm -rf #{build_options[:build_dir]}", true) == false
				Log.error "Could not clean the build directory \"#{build_options[:build_dir]}\""
				return false
			end
		end

		formatted = formatBuildOptions cmake_options
		Log.log "Performing cmake on project from \"#{build_options[:cmake_location]}/CMakeLists.txt\" to \"#{build_options[:build_dir]}\" with options \"#{formatted}\""
		if command("cmake -B#{build_options[:build_dir]} -H#{build_options[:cmake_location]} #{formatted}", build_options[:mute]) == false
			Log.error "Could not perform cmake on the project."
			return false
		end

		if command("make -C #{build_options[:build_dir]}" << (build_options[:verbose] == true ? " VERBOSE=1" : ""), build_options[:mute]) == false
			Log.error "Something happened while performing make on the project."
			return false
		end

		if build_options[:install] == true
			cmd = ""
			if build_options[:sudo] == true
				cmd = "sudo "
			end
			cmd += "make -C #{build_options[:build_dir]} install"
			if command(cmd << (build_options[:verbose] == true ? " VERBOSE=1" : ""), build_options[:mute]) == false
				Log.error "Something happened while performing make install on the project."
				return false
			end
		end

		if build_options[:clean] == "after" || build_options[:clean] == "both"
			Log.log "Cleaning build directory \"#{build_options[:build_dir]}\""
			if command("rm -rf #{build_options[:build_dir]}", true) == false
				Log.error "Could not clean the build directory \"#{build_options[:build_dir]}\""
				return false
			end
		end

		Log.log "Finished"
		true
	end

	def formatBuildOptions(opt)
		formatted = ""
		opt.each { |str|
			formatted += str
			formatted += " "
		}
		formatted
	end
end

class Arguments
	include Options

	def parse
		@cmake_options = []
		@takes_arg = false
		@commands = Commands.new
		for i in 0...ARGV.length
			if @takes_arg
				@takes_arg = false
				next
			elsif isOption(ARGV[i])
				m = getMethod(ARGV[i])
				return false if m.nil? or !@commands.respond_to?(m)
				@takes_arg = takesParameter(ARGV[i])
				return false if !@commands.send(m, takesParameter(ARGV[i]) ? ARGV[i + 1] : nil)
			else
				@cmake_options.push(ARGV[i])
			end
		end
	end

	def build
		builder = Builder.new
		builder.build(@commands.build_options, @cmake_options)
	end
end

args = Arguments.new

if !args.parse
	Help.display
	exit 1
end

exit args.build == false ? 1 : 0
